<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guoanshequ.dc.das.dao.slave.NewaddCusMapper">

<!-- pes任务调度生成本地表取上月月度数据  ；社区动态：获取实时表格明细 -->
	<select id="queryNewaddCus" parameterType="java.util.Map"
		resultType="java.util.Map">
        <![CDATA[
			SELECT
a.`name` AS city_name,
ts.`name` AS store_name,
ts.id AS platformid,
IFNULL(ts.code,'') as storeno,
IFNULL(SUM(t.pay_count),0) AS pay_count, 
IFNULL(SUM(t.new_count),0) AS new_count, 
IFNULL(SUM(t.total_count),0) AS total_count, 
IFNULL(SUM(t.pay_20_count),0) AS pay_20_count, 
IFNULL(SUM(t.new_20_count),0) AS new_20_count 
FROM t_store ts
LEFT JOIN  t_sys_area a on ts.city_code = a.code and a.level = 2
LEFT JOIN
    (
		(
			SELECT tor.store_id, COUNT(DISTINCT tor.customer_id) AS pay_count,
				0 AS new_count, 0 AS new_20_count, 0 AS total_count, 0 AS pay_20_count
			FROM t_eshop te
			JOIN t_order tor ON te.id=tor.eshop_id
				AND tor.store_id IN (SELECT ts_in.id FROM t_store ts_in WHERE ts_in.number IN (${storeids}))
			JOIN t_order_flow tof ON tor.id=tof.order_id
				AND tof.order_status='signed'
				AND tof.create_time>=DATE(#{begindate})
				AND tof.create_time<DATE_ADD(DATE(#{enddate}),INTERVAL 1 DAY)
			WHERE te.`name` NOT LIKE '%测试%' AND te.white!='QA'
			GROUP BY tor.store_id
		)
		UNION ALL
		(
			SELECT tor.store_id, 0 AS pay_count,
				COUNT(DISTINCT tor.customer_id) AS new_count,
				0 AS new_20_count, 0 AS total_count, 0 AS pay_20_count
			FROM t_eshop te
			JOIN t_order tor ON te.id=tor.eshop_id
				AND tor.store_id IN (SELECT ts_in.id FROM t_store ts_in WHERE ts_in.number IN (${storeids}))
			JOIN t_order_flow tof ON tor.id=tof.order_id
				AND tof.order_status='signed'
				AND tof.create_time>=DATE(#{begindate})
				AND tof.create_time<DATE_ADD(DATE(#{enddate}),INTERVAL 1 DAY)
			LEFT JOIN
				(
					SELECT tor_in.store_id, tor_in.customer_id
					FROM t_eshop te_in
					JOIN t_order tor_in ON te_in.id=tor_in.eshop_id
						AND tor_in.store_id IN (SELECT ts_in.id FROM t_store ts_in WHERE ts_in.number IN (${storeids}))
					JOIN t_order_flow tof_in ON tor_in.id=tof_in.order_id
						AND tof_in.order_status='signed'
						AND tof_in.create_time<DATE(#{begindate})
					WHERE te_in.`name` NOT LIKE '%测试%' AND te_in.white!='QA'
					GROUP BY tor_in.store_id, tor_in.customer_id
				) t ON tor.store_id=t.store_id
				AND tor.customer_id=t.customer_id
			WHERE te.`name` NOT LIKE '%测试%' AND te.white!='QA'
				AND t.store_id IS NULL
			GROUP BY tor.store_id
		)
		UNION ALL
		(
			SELECT t.store_id, 0 AS pay_count, 0 AS new_count,
				COUNT(DISTINCT t.customer_id) AS new_20_count,
				0 AS total_count, 0 AS pay_20_count
			FROM
				(
					SELECT t_in.store_id, t_in.customer_id
					FROM
						(
							SELECT tor.group_id, tor.store_id, tor.customer_id, tor.trading_price
							FROM t_eshop te
							JOIN t_order tor ON te.id=tor.eshop_id
								AND tor.store_id IN (SELECT ts_in.id FROM t_store ts_in WHERE ts_in.number IN (${storeids}))
							JOIN t_order_flow tof ON tor.id=tof.order_id
								AND tof.order_status='signed'
								AND tof.create_time>=DATE(#{begindate})
								AND tof.create_time<DATE_ADD(DATE(#{enddate}),INTERVAL 1 DAY)
							LEFT JOIN
								(
									SELECT tor_in.store_id, tor_in.customer_id
									FROM t_eshop te_in
									JOIN t_order tor_in ON te_in.id=tor_in.eshop_id
										AND tor_in.store_id IN (SELECT ts_in.id FROM t_store ts_in WHERE ts_in.number IN (${storeids}))
									JOIN t_order_flow tof_in ON tor_in.id=tof_in.order_id
										AND tof_in.order_status='signed'
										AND tof_in.create_time<DATE(#{begindate})
									WHERE te_in.`name` NOT LIKE '%测试%' AND te_in.white!='QA'
									GROUP BY tor_in.store_id, tor_in.customer_id
								) t ON tor.store_id=t.store_id
								AND tor.customer_id=t.customer_id
							WHERE te.`name` NOT LIKE '%测试%' AND te.white!='QA'
								AND t.store_id IS NULL
							GROUP BY tor.group_id
						) t_in
					GROUP BY t_in.store_id, t_in.customer_id HAVING SUM(t_in.trading_price)>=20.0
				) t
			GROUP BY t.store_id
		)
		UNION ALL
		(
			SELECT tor.store_id, 0 AS pay_count, 0 AS new_count, 0 AS new_20_count,
				COUNT(DISTINCT tor.customer_id) AS total_count, 0 AS pay_20_count
			FROM t_eshop te
			JOIN t_order tor ON te.id=tor.eshop_id
				AND tor.store_id IN (SELECT ts_in.id FROM t_store ts_in WHERE ts_in.number IN (${storeids}))
			JOIN t_order_flow tof ON tor.id=tof.order_id
				AND tof.order_status='signed'
				AND tof.create_time<DATE_ADD(DATE(#{enddate}),INTERVAL 1 DAY)
			WHERE te.`name` NOT LIKE '%测试%' AND te.white!='QA'
			GROUP BY tor.store_id
		)
		UNION ALL
		(
			SELECT t.store_id, 0 AS pay_count, 0 AS new_count, 0 AS new_20_count,
				0 AS total_count, COUNT(DISTINCT t.customer_id) AS pay_20_count
			FROM
				(
					SELECT tor.store_id, tor.customer_id
					FROM
						(
							SELECT tor_in.customer_id, tor_in.store_id, tor_in.trading_price
							FROM t_eshop te
							JOIN t_order tor_in ON te.id=tor_in.eshop_id
								AND tor_in.store_id IN (SELECT ts_in.id FROM t_store ts_in WHERE ts_in.number IN (${storeids}))
							JOIN t_order_flow tof ON tor_in.id=tof.order_id
								AND tof.order_status='signed'
								AND tof.create_time>=DATE(#{begindate})
								AND tof.create_time<DATE_ADD(DATE(#{enddate}),INTERVAL 1 DAY)
							WHERE te.`name` NOT LIKE '%测试%' OR te.white!='QA'
							GROUP BY tor_in.group_id
						) tor
					GROUP BY tor.store_id, tor.customer_id
					HAVING SUM(tor.trading_price)>20
				) t
			GROUP BY t.store_id
		)
	) t ON t.store_id=ts.id
WHERE ts.number IN (${storeids}) AND ts.`name` NOT LIKE '%测试%'  AND ts.`status`=0 AND ts.white != 'QA'
GROUP BY ts.id

		]]>
		<if test="null != limitcond and '' != limitcond">
           <![CDATA[                   
              LIMIT ${limitcond}
           ]]>
		</if>
	</select>

<!-- 社区动态：上门送单量圆圈总数，每日总数 -->
<select id="queryNewaddCusSumByDate" parameterType="java.util.Map"
		resultType="java.util.Map">
        <![CDATA[
SELECT new_20_count AS newaddsum,count(*) totalcount FROM (
SELECT
a.`name` AS city_name,
ts.`name` AS store_name,
ts.id AS platformid, 
IFNULL(SUM(t.new_20_count),0) AS new_20_count
FROM t_store ts
LEFT JOIN  t_sys_area a on ts.city_code = a.code and a.level = 2
LEFT JOIN
    (
		(
			SELECT t.store_id, 0 AS pay_count, 0 AS new_count,
				COUNT(DISTINCT t.customer_id) AS new_20_count,
				0 AS total_count, 0 AS pay_20_count
			FROM
				(
					SELECT t_in.store_id, t_in.customer_id
					FROM
						(
							SELECT tor.group_id, tor.store_id, tor.customer_id, tor.trading_price
							FROM t_eshop te
							JOIN t_order tor ON te.id=tor.eshop_id
								AND tor.store_id IN (SELECT ts_in.id FROM t_store ts_in WHERE ts_in.number IN (${storeids}))
							JOIN t_order_flow tof ON tor.id=tof.order_id
								AND tof.order_status='signed'
								AND tof.create_time>=DATE(#{begindate})
								AND tof.create_time<DATE_ADD(DATE(#{enddate}),INTERVAL 1 DAY)
							LEFT JOIN
								(
									SELECT tor_in.store_id, tor_in.customer_id
									FROM t_eshop te_in
									JOIN t_order tor_in ON te_in.id=tor_in.eshop_id
										AND tor_in.store_id IN (SELECT ts_in.id FROM t_store ts_in WHERE ts_in.number IN (${storeids}))
									JOIN t_order_flow tof_in ON tor_in.id=tof_in.order_id
										AND tof_in.order_status='signed'
										AND tof_in.create_time<DATE(#{begindate})
									WHERE te_in.`name` NOT LIKE '%测试%' AND te_in.white!='QA'
									GROUP BY tor_in.store_id, tor_in.customer_id
								) t ON tor.store_id=t.store_id
								AND tor.customer_id=t.customer_id
							WHERE te.`name` NOT LIKE '%测试%' AND te.white!='QA'
								AND t.store_id IS NULL
							GROUP BY tor.group_id
						) t_in
					GROUP BY t_in.store_id, t_in.customer_id HAVING SUM(t_in.trading_price)>=20.0
				) t
			GROUP BY t.store_id
		)
	) t ON t.store_id=ts.id
WHERE ts.number IN (${storeids}) AND ts.`name` NOT LIKE '%测试%'
	AND ts.`status`=0 AND ts.white != 'QA' 
	GROUP BY ts.id ) newaddline
		]]>
	</select>
</mapper>