<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guoanshequ.dc.das.dao.slave.AbnormalOrderMapper">

	<!-- 自动：企业购A 所有企业购E店里面的订单-->
	<select id="queryAbnorOrderA" parameterType="java.util.Map" resultType="java.util.Map">
        <![CDATA[
			select
			tor.order_sn as ordersn,
			tsa.name as cityname,
			ts.code as storeno,
			ts.`name` as storename,
			te.name as eshopname,
			tdc1.`name` AS channelname,
			tdc2.`name` AS deptname,
			tor.trading_price as tradingprice,
			tor.payable_price as payableprice,
			'企业购' as abnortype,
			'auto' as datatype,
			0 as status,
			tor.sign_time as signedtime,
			YEAR(date_sub(now(),interval 1 day)) as year ,
			MONTH(date_sub(now(),interval 1 day)) as month ,
			NOW() as createtime,
			NOW() as updatetime
			from t_order tor
			join t_store ts on (tor.store_id = ts.id)
			join t_eshop te on (tor.eshop_id = te.id)
			join t_sys_area tsa on (ts.city_code = tsa.code and tsa.level = 2)
			left join t_department_channel tdc1 on (te.channel_id = tdc1.id)
			left join t_department_channel tdc2 on (te.bussiness_group_id = tdc2.id)
			where tor.sign_time >=#{begindate} and tor.sign_time < DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY)
			and te.id in (${eshopids})
			and te.name NOT LIKE '%测试%' and te.white!='QA'
			and ts.name NOT LIKE '%测试%' and ts.status=0 and ts.white!='QA'
		]]>
	</select>
	
	<!--自动：1 营销费用异常B 优惠力度大于50%的（优惠券力度大于总金额50%），
			2E店名 不是 国安社区会员开卡礼，国安社区会员试用礼 开头
			3用了优惠券的-->
	<select id="queryAbnorOrderB" parameterType="java.util.Map" resultType="java.util.Map">
        <![CDATA[
			select
			tor.order_sn as ordersn,
			tsa.name as cityname,
			ts.code as storeno,
			ts.`name` as storename,
			te.name as eshopname,
			LEFT(tesr.role_name,POSITION('_' IN tesr.role_name)-1) AS channelname,
			SUBSTRING(tesr.role_name,POSITION('_' IN tesr.role_name)+1) AS deptname,
			tor.trading_price as tradingprice,
			tor.payable_price as payableprice,
			'营销费用异常' as abnortype,
			'auto' as datatype,
			0 as status,
			tor.sign_time as signedtime,
			YEAR(date_sub(now(),interval 1 day)) as year ,
			MONTH(date_sub(now(),interval 1 day)) as month ,
			NOW() as createtime,
			NOW() as updatetime
			from t_order tor,t_store ts,t_eshop te,t_ed_sys_role tesr,t_sys_area tsa,t_order_receipts trp
			where tor.sign_time >=#{begindate} and tor.sign_time < DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY)
			and tor.store_id = ts.id
			and tor.eshop_id = te.id
			and tesr.id = te.department_id and tesr.role_name like '%洗衣%'
			and te.name NOT LIKE '%测试%' and te.white!='QA'
			and ts.name NOT LIKE '%测试%' and ts.status=0 and ts.white!='QA'
			and ts.city_code = tsa.code and tsa.level = 2
			and  trp.eshop_id = te.id  
			and	 trp.order_group_id = tor.group_id   
			and	 trp.`status` =0  
			and	 trp.type='order'  
			and	 trp.pay_status= 'payed'  
			and	 (trp.pay_platform !='prepay' or trp.pay_platform is null)			
			and tor.payable_price/tor.trading_price < 0.5
			and (te.name not like '国安社区会员开卡礼%' and te.name not like '国安社区会员试用礼%')
			and tor.id not in (select order_id from t_order_item_extra toie where toie.create_time >=#{begindate} and toie.create_time < DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY) and apportion_rebate >0)
			UNION
			select
			tor.order_sn as ordersn,
			tsa.name as cityname,
			ts.code as storeno,
			ts.`name` as storename,
			te.name as eshopname,
			LEFT(tesr.role_name,POSITION('_' IN tesr.role_name)-1) AS channelname,
			SUBSTRING(tesr.role_name,POSITION('_' IN tesr.role_name)+1) AS deptname,
			tor.trading_price as tradingprice,
			tor.payable_price as payableprice,
			'营销费用异常' as abnortype,
			'auto' as datatype,
			0 as status,
			tor.sign_time as signedtime,
			YEAR(date_sub(now(),interval 1 day)) as year ,
			MONTH(date_sub(now(),interval 1 day)) as month ,
			NOW() as createtime,
			NOW() as updatetime
			from t_order tor,t_store ts,t_eshop te,t_ed_sys_role tesr,t_sys_area tsa
			where  tor.sign_time >=#{begindate} and tor.sign_time<DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY)
			and tor.store_id = ts.id
			and tor.eshop_id = te.id
			and tesr.id = te.department_id and tesr.role_name not like '%洗衣%'
			and te.name NOT LIKE '%测试%' and te.white!='QA'
			and ts.name NOT LIKE '%测试%' and ts.status=0 and ts.white!='QA'
			and ts.city_code = tsa.code and tsa.level = 2
			and tor.payable_price/tor.trading_price < 0.5
			and (te.name not like '国安社区会员开卡礼%' and te.name not like '国安社区会员试用礼%')
			and tor.id not in (select order_id from t_order_item_extra toie where toie.create_time >=#{begindate} and toie.create_time < DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY) and apportion_rebate >0)
		]]>
	</select>
	
	<!-- 手动筛选:连续购买型
		同一手机号连续4个月内在同一门店下单大于等于10单的订单且金额大于1000
	-->
	<select id="queryAbnorOrderDownA" parameterType="java.util.Map" resultType="java.util.Map">
        <![CDATA[
			select
			tor.order_sn as ordersn,
			tc.mobilephone as mobilephone,
			tc.id as customername,
			tsa.name as cityname,
			ts.code as storeno,
			ts.`name` as storename,
			te.name as eshopname,
			LEFT(tesr.role_name,POSITION('_' IN tesr.role_name)-1) AS channelname,
			SUBSTRING(tesr.role_name,POSITION('_' IN tesr.role_name)+1) AS deptname,
			tor.trading_price as tradingprice,
			tor.payable_price as payableprice,
			'连续购买型' as abnortype,
			'manual' as datatype,
			0 as status,
			tor.sign_time as signedtime,
			YEAR(date_sub(now(),interval 1 day)) as year ,
			MONTH(date_sub(now(),interval 1 day)) as month ,
			NOW() as createtime,
			NOW() as updatetime
			from t_order tor,t_store ts,t_eshop te,t_ed_sys_role tesr,t_sys_area tsa,t_customer tc,(
					select
					customer_id,tor.store_id
					from t_order tor
					where tor.sign_time >=#{prenbegindate} and tor.sign_time<DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY)
					and tor.trading_price >=1000
					group by customer_id,tor.store_id
					having count(*)>=10 
			) cusline
			where  tor.sign_time >=#{prenbegindate} and tor.sign_time <DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY)
			and tor.store_id = ts.id
			and tor.eshop_id = te.id
			and tesr.id = te.department_id and tesr.role_name LIKE '%\_%'
			and te.name NOT LIKE '%测试%' and te.white!='QA'
			and ts.name NOT LIKE '%测试%' and ts.status=0 and ts.white!='QA'
			and ts.city_code = tsa.code and tsa.level = 2
			and tor.customer_id = tc.id
			and tor.trading_price >=1000 
			and tor.customer_id = cusline.customer_id
			and tor.store_id = cusline.store_id
			order by tor.customer_id,tor.store_id
		]]>
	</select>
	
	<!-- 手动筛选:代客下单异常 B
		订单渠道是（门店）的订单，客单价超过3000的商品
	-->
	<select id="queryAbnorOrderDownB" parameterType="java.util.Map" resultType="java.util.Map">
        <![CDATA[
			select
			tor.order_sn as ordersn,
			tc.mobilephone as mobilephone,
			tc.id as customername,
			tsa.name as cityname,
			ts.code as storeno,
			ts.`name` as storename,
			te.name as eshopname,
			LEFT(tesr.role_name,POSITION('_' IN tesr.role_name)-1) AS channelname,
			SUBSTRING(tesr.role_name,POSITION('_' IN tesr.role_name)+1) AS deptname,
			tor.trading_price as tradingprice,
			tor.payable_price as payableprice,
			'代客下单异常' as abnortype,
			'manual' as datatype,
			0 as status,
			tor.sign_time as signedtime,
			YEAR(date_sub(now(),interval 1 day)) as year ,
			MONTH(date_sub(now(),interval 1 day)) as month ,
			NOW() as createtime,
			NOW() as updatetime
			from t_order tor,t_store ts,t_eshop te,t_ed_sys_role tesr,t_sys_area tsa,t_customer tc
			where tor.order_source ='store'
			and tor.sign_time >=#{begindate} and tor.sign_time <DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY)
			and tor.store_id = ts.id
			and tor.eshop_id = te.id
			and tesr.id = te.department_id and tesr.role_name LIKE '%\_%'
			and te.name NOT LIKE '%测试%' and te.white!='QA'
			and ts.name NOT LIKE '%测试%' and ts.status=0 and ts.white!='QA'
			and ts.city_code = tsa.code and tsa.level = 2
			and tor.customer_id = tc.id
			and tor.trading_price >3000 
		]]>
	</select>
	
	<!--手动筛选:大额订单
		大额订单:商品总金额大于10000的商品
	-->
	<select id="queryAbnorOrderDownC" parameterType="java.util.Map" resultType="java.util.Map">
        <![CDATA[
			select
			tor.order_sn as ordersn,
			tc.mobilephone as mobilephone,
			tc.id as customername,
			tsa.name as cityname,
			ts.code as storeno,
			ts.`name` as storename,
			te.name as eshopname,
			LEFT(tesr.role_name,POSITION('_' IN tesr.role_name)-1) AS channelname,
			SUBSTRING(tesr.role_name,POSITION('_' IN tesr.role_name)+1) AS deptname,
			tor.trading_price as tradingprice,
			tor.payable_price as payableprice,
			'大额订单' as abnortype,
			'manual' as datatype,
			0 as status,
			tor.sign_time as signedtime,
			YEAR(date_sub(now(),interval 1 day)) as year ,
			MONTH(date_sub(now(),interval 1 day)) as month ,
			NOW() as createtime,
			NOW() as updatetime
			from t_order tor,t_store ts,t_eshop te,t_ed_sys_role tesr,t_sys_area tsa,t_customer tc
			where tor.sign_time >=#{begindate} and tor.sign_time <DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY)
			and tor.store_id = ts.id
			and tor.eshop_id = te.id
			and tesr.id = te.department_id and tesr.role_name LIKE '%\_%'
			and te.name NOT LIKE '%测试%' and te.white!='QA'
			and ts.name NOT LIKE '%测试%' and ts.status=0 and ts.white!='QA'
			and ts.city_code = tsa.code and tsa.level = 2
			and tor.customer_id = tc.id
			and tor.trading_price >10000 
		]]>
	</select>
	
	<!--手动筛选:下架异常订单D
		当月下架产品存在交易记录的订单，金额大于1000的订单
	<select id="queryAbnorOrderDownD" parameterType="java.util.Map" resultType="java.util.Map">
        <![CDATA[
			select
			tor.order_sn as ordersn,
			tc.mobilephone as mobilephone,
			tc.id as customername,
			tsa.name as cityname,
			ts.code as storeno,
			ts.`name` as storename,
			te.name as eshopname,
			LEFT(tesr.role_name,POSITION('_' IN tesr.role_name)-1) AS channelname,
			SUBSTRING(tesr.role_name,POSITION('_' IN tesr.role_name)+1) AS deptname,
			tor.trading_price as tradingprice,
			tor.payable_price as payableprice,
			'下架异常订单' as abnortype,
			'manual' as datatype,
			0 as status,
			tof.create_time as signedtime,
			YEAR(date_sub(now(),interval 1 day)) as year ,
			MONTH(date_sub(now(),interval 1 day)) as month ,
			NOW() as createtime,
			NOW() as updatetime
			from t_order tor,df_order_flow_monthly tof,t_store ts,t_eshop te,t_ed_sys_role tesr,t_sys_area tsa,t_customer tc,t_order_item toi,t_product tpc
			where tor.id = tof.order_id
			and tof.order_status ='signed'
			and tof.create_time >=#{begindate} and tof.create_time<DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY)
			and tor.store_id = ts.id
			and tor.eshop_id = te.id
			and tesr.id = te.department_id and tesr.role_name LIKE '%\_%'
			and te.name NOT LIKE '%测试%' and te.white!='QA'
			and ts.name NOT LIKE '%测试%' and ts.status=0 and ts.white!='QA'
			and ts.city_code = tsa.code and tsa.level = 2
			and tor.customer_id = tc.id
			and tor.trading_price >1000 
			and tor.id = toi.order_id
			and toi.eshop_pro_id = tpc.id and tpc.content_shelf ='off' 
			and tpc.update_time >#{begindate} and tpc.update_time <DATE_ADD(DATE(#{enddate}), INTERVAL 1 DAY)
			group by tor.id
			order by tor.store_id
		]]>
	</select>
	-->
</mapper>