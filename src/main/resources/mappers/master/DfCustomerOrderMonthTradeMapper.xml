<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guoanshequ.dc.das.dao.master.DfCustomerOrderMonthTradeMapper">

	<!-- 获取开始时间 -->
    <select id="queryNextBeginTime" resultType="java.lang.String">
        <![CDATA[
			select begintime from ds_crontask where id = 3;
		]]>
    </select>

	<!-- 更新开始时间 -->
	<select id="updateNextBeginTime" parameterType="java.lang.String">
		<![CDATA[
			update ds_crontask set begintime = #{begintime} where id = 3;
		]]>
	</select>
	
	<!-- 以人店月查询用户最大消费次数 -->
	<select id="queryCustomerMaxCount" parameterType="java.util.Map" resultType="java.lang.Integer">
		<![CDATA[
			select max(order_month_count) from df_customer_order_month_trade_new
			where customer_id = #{customer_id} and store_id =#{store_id} and order_ym < #{order_ym}
		]]>
	</select>

	<!-- 单条插入数据 -->
	<insert id="addDfCustomerOrderMonthTrade" parameterType="java.util.Map" >
		INSERT INTO df_customer_order_month_trade_new (
			`customer_id`,`store_id`,`order_ym`,`trading_price`,`placename`,`order_sn`,`create_time`,`update_time`,
			`order_month_count`, `latitude`, `longitude`,`city_name`,`tiny_village_id`,`tiny_village_code`,
			`tiny_village_name`,`mobilephone`
		) VALUES (
			#{customer_id},#{store_id},#{order_ym},#{amount},#{placename},#{order_sn},NOW(),NULL,
			#{order_month_count},#{latitude},#{longitude},#{city_name},#{tiny_village_id},#{tiny_village_code},
			#{tiny_village_name},#{mobilephone}
		) ON duplicate key UPDATE trading_price = trading_price + #{amount}, `update_time` = CURRENT_TIMESTAMP()
	</insert>  
	
	<!-- 批量插入数据，未使用 -->
	<insert id="addDfCustomerOrderMonthTrades" parameterType="java.util.List" >
		INSERT INTO df_customer_order_month_trade_new (
			`customer_id`,`store_id`,`order_ym`,`trading_price`,`placename`,`order_sn`,`create_time`,`update_time`,
			`order_month_count`, `latitude`, `longitude`,`city_name`,`tiny_village_id`,`tiny_village_code`,
			`tiny_village_name`
		) VALUES 
		<foreach collection="list" item="item" index="index" separator=",">
		(
			#{item.customer_id},#{item.store_id},#{item.order_ym},#{item.amount},#{item.placename},#{item.order_sn},NOW(),NULL,
			#{item.order_month_count},#{item.latitude},#{item.longitude},#{item.city_name},#{item.tiny_village_id},#{item.tiny_village_code},
			#{item.tiny_village_name}
		) 
		</foreach>
	</insert> 
	
	<!-- 给mass_order_daily中订单拉新打标签 -->
	<update id="updateCustomerOrderNewDaily" parameterType="java.util.Map" >
		<![CDATA[
			update df_mass_order_daily tor ,df_customer_order_month_trade_new dcomtn 
			set tor.customer_isnew_flag  = 
			(
			 case when dcomtn.trading_price > 20 then 20
			      when dcomtn.trading_price > 10 then 10
						else 0
			 end
			)
			where tor.order_sn = dcomtn.order_sn
			and dcomtn.order_month_count = 1
			and dcomtn.order_ym = #{order_ym}
		]]>
	</update>
	
	<!-- 给mass_order_monthly中订单拉新打标签 -->
	<update id="updateCustomerOrderNewMonthly" parameterType="java.util.Map" >
		<![CDATA[
			update df_mass_order_monthly tor ,df_customer_order_month_trade_new dcomtn 
			set tor.customer_isnew_flag  = 
			(
			 case when dcomtn.trading_price > 20 then 20
			      when dcomtn.trading_price > 10 then 10
						else 0
			 end
			)
			where tor.order_sn = dcomtn.order_sn
			and dcomtn.order_month_count = 1
			and dcomtn.order_ym = #{order_ym}
		]]>
	</update>
	
	<!-- 给mass_order_total中订单拉新打标签 -->
	<update id="updateCustomerOrderNewTotal" parameterType="java.util.Map" >
		<![CDATA[
			update df_mass_order_total tor ,df_customer_order_month_trade_new dcomtn 
			set tor.customer_isnew_flag  = 
			(
			 case when dcomtn.trading_price > 20 then 20
			      when dcomtn.trading_price > 10 then 10
					   else 0
			 end
			)
			where tor.order_sn = dcomtn.order_sn
			and dcomtn.order_month_count = 1
			and dcomtn.order_ym = #{order_ym}
		]]>
	</update>
	
	<!-- 通过订单号将小区数据信息补充完整 -->
	<update id="updateTinyInfo" parameterType="java.util.Map">
		<![CDATA[
			update df_customer_order_month_trade_new 
			set tiny_village_id=#{tiny_village_id},
				tiny_village_code=#{tiny_village_code},tiny_village_name=#{tiny_village_name}
			where order_sn = #{order_sn}
		]]>
   </update>
   <!-- 按创建时间搜索订单号 -->
  <select id="queryCusOrderMonByCreatetime" parameterType="java.util.Map" resultType="String">
		<![CDATA[
			select order_sn 
			from df_customer_order_month_trade_new 
			where create_time >=#{begintime} and create_time <=#{endtime} 
			and order_sn is not null 
		]]>
  </select>
  
  <insert id="customerTradePatch" parameterType="java.util.Map">
		<![CDATA[
		insert ignore into df_customer_order_month_trade_new 
				(customer_id,store_id,order_ym,trading_price,order_sn,order_month_count,city_name,mobilephone)
		SELECT 
			dosm.customer_id,
			dosm.store_id,
			DATE_FORMAT(dosm.sign_time,'%Y%m') order_ym,			
			IFNULL(SUM(dosm.trading_price),0) trading_price,
			MIN(dosm.order_sn) order_sn,
			CASE WHEN dcomt.order_month_count is NULL THEN 1 ELSE dcomt.order_month_count + 1 END order_month_count,
			dosm.store_city_name as city_name,
			dosm.customer_mobile_phone as mobilephone
		FROM df_mass_order_monthly dosm
    	LEFT JOIN df_customer_order_month_trade_new dcomt ON (
            dosm.customer_id = dcomt.customer_id AND 
            dosm.store_id = dcomt.store_id AND 
            dcomt.order_month_count = ( 
                SELECT max(order_month_count) 
                FROM df_customer_order_month_trade_new 
                WHERE customer_id = dosm.customer_id AND 
                    store_id = dosm.store_id AND 
                    order_ym < DATE_FORMAT(dosm.sign_time,'%Y%m')
               )   
     	) 
		WHERE dosm.eshop_name NOT LIKE '%测试%' AND dosm.eshop_white!='QA' 
			AND dosm.sign_time >= #{maxSignedTime} 
			AND dosm.sign_time < #{endSignedTime}
		GROUP BY
			dosm.customer_id,
			dosm.store_id,
			DATE_FORMAT(dosm.sign_time,'%Y%m')
		]]>
  </insert>
	
</mapper>