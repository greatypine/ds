<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guoanshequ.dc.das.dao.master.DfMassOrderMapper">

	<resultMap type="MassOrderEntity" id="massOrderResultMap">
        <id property="id" column="ID" />
		<result property = "order_sn" column = "ORDER_SN" />
		<result property = "group_id" column = "GROUP_ID" />
		<result property = "order_type" column = "ORDER_TYPE" />
		<result property = "business_model_id" column = "BUSINESS_MODEL_ID" />
		<result property = "customer_id" column = "CUSTOMER_ID" />
		<result property = "order_address_id" column = "ORDER_ADDRESS_ID" />
		<result property = "store_id" column = "STORE_ID" />
		<result property = "eshop_id" column = "ESHOP_ID" />
		<result property = "order_status" column = "ORDER_STATUS" />
		<result property = "order_source" column = "ORDER_SOURCE" />
		<result property = "invoice_status" column = "INVOICE_STATUS" />
		<result property = "buyer_remark" column = "BUYER_REMARK" />
		<result property = "seller_remark" column = "SELLER_REMARK" />
		<result property = "employee_remark" column = "EMPLOYEE_REMARK" />
		<result property = "abnormal_type" column = "ABNORMAL_TYPE" />
		<result property = "abnormal_remark" column = "ABNORMAL_REMARK" />
		<result property = "delivery_type" column = "DELIVERY_TYPE" />
		<result property = "trading_price" column = "TRADING_PRICE" />
		<result property = "payable_price" column = "PAYABLE_PRICE" />
		<result property = "is_split" column = "IS_SPLIT" />
		<result property = "employee_id" column = "EMPLOYEE_ID" />
		<result property = "employee_phone" column = "EMPLOYEE_PHONE" />
		<result property = "employee_name" column = "EMPLOYEE_NAME" />
		<result property = "appointment_start_time" column = "APPOINTMENT_START_TIME" />
		<result property = "appointment_end_time" column = "APPOINTMENT_END_TIME" />
		<result property = "eshop_combo_pro_id" column = "ESHOP_COMBO_PRO_ID" />
		<result property = "expiry_date" column = "EXPIRY_DATE" />
		<result property = "combo_price" column = "COMBO_PRICE" />
		<result property = "total_quantity" column = "TOTAL_QUANTITY" />
		<result property = "status" column = "STATUS" />
		<result property = "version" column = "VERSION" />
		<result property = "create_user" column = "CREATE_USER" />
		<result property = "create_time" column = "CREATE_TIME" />
		<result property = "update_user" column = "UPDATE_USER" />
		<result property = "update_time" column = "UPDATE_TIME" />
		<result property = "create_user_id" column = "CREATE_USER_ID" />
		<result property = "update_user_id" column = "UPDATE_USER_ID" />
		<result property = "order_sn_reserve" column = "ORDER_SN_RESERVE" />
		<result property = "store_remark" column = "STORE_REMARK" />
		<result property = "score" column = "SCORE" />
		<result property = "groupon_instance_id" column = "GROUPON_INSTANCE_ID" />
		<result property = "normal_store_id" column = "NORMAL_STORE_ID" />
		<result property = "third_part" column = "THIRD_PART" />
		<result property = "sign_time" column = "SIGN_TIME" />
		<result property = "info_village_code" column = "INFO_VILLAGE_CODE" />
		<result property = "area_code" column = "AREA_CODE" />
		<result property = "info_employee_a_no" column = "INFO_EMPLOYEE_A_NO" />
		<result property = "pubseas_label" column = "PUBSEAS_LABEL" />
		<result property = "abnormal_label" column = "ABNORMAL_LABEL" />
		<result property = "return_label" column = "RETURN_LABEL" />
		<result property = "loan_label" column = "LOAN_LABEL" />
		<result property = "return_time" column = "RETURN_TIME" />
		<result property = "returned_amount" column = "RETURNED_AMOUNT" />
		<result property = "order_quantity" column = "ORDER_QUANTITY" />
		<result property = "eshop_name" column = "ESHOP_NAME" />
		<result property = "eshop_white" column = "ESHOP_WHITE" />
		<result property = "store_name" column = "STORE_NAME" />
		<result property = "store_code" column = "STORE_CODE" />
		<result property = "store_city_name" column = "STORE_CITY_NAME" />
		<result property = "store_city_code" column = "STORE_CITY_CODE" />
		<result property = "store_white" column = "STORE_WHITE" />
		<result property = "store_province_code" column = "STORE_PROVINCE_CODE" />
		<result property = "store_status" column = "STORE_STATUS" />
		<result property = "customer_name" column = "CUSTOMER_NAME" />
		<result property = "customer_mobile_phone" column = "CUSTOMER_MOBILE_PHONE" />
		<result property = "customer_isnew_flag" column = "CUSTOMER_ISNEW_FLAG" />
		<result property = "department_id" column = "DEPARTMENT_ID" />
		<result property = "bussiness_group_id" column = "BUSSINESS_GROUP_ID" />
		<result property = "department_name" column = "DEPARTMENT_NAME" />
		<result property = "area_company_id" column = "AREA_COMPANY_ID" />
		<result property = "company_name" column = "COMPANY_NAME" />
		<result property = "channel_id" column = "CHANNEL_ID" />
		<result property = "channel_name" column = "CHANNEL_NAME" />
		<result property = "gmv_price" column = "GMV_PRICE" />
		<result property = "employee_no" column = "EMPLOYEE_NO" />
		<result property = "addr_name" column = "ADDR_NAME" />
		<result property = "addr_mobilephone" column = "ADDR_MOBILEPHONE" />
		<result property = "addr_address" column = "ADDR_ADDRESS" />
		<result property = "addr_latitude" column = "ADDR_LATITUDE" />
		<result property = "addr_longitude" column = "ADDR_LONGITUDE" />
		<result property = "insert_time" column = "INSERT_TIME" />
		<result property = "order_tag1" column = "ORDER_TAG1" />
		<result property = "order_tag2" column = "ORDER_TAG2" />
		<result property = "apportion_rebate" column = "APPORTION_REBATE" />
		<result property = "apportion_coupon" column = "APPORTION_COUPON" />
		<result property = "cost_price" column = "COST_PRICE" />
		<result property = "order_profit" column = "ORDER_PROFIT" />
		<result property = "business_type" column = "BUSINESS_TYPE" />
		<result property = "contract_id" column = "CONTRACT_ID" />
		<result property = "contract_method" column = "CONTRACT_METHOD" />
		<result property = "eshop_joint_ims" column = "ESHOP_JOINT_IMS" />
		<result property = "cct_proration_platform" column = "CCT_PRORATION_PLATFORM" />
		<result property = "cct_proration_seller" column = "CCT_PRORATION_SELLER" />
		<result property = "cct_content_batch" column = "CCT_CONTENT_BATCH" />
		<result property = "contract_percent" column = "CONTRACT_PERCENT" />
		<result property = "contract_price" column = "CONTRACT_PRICE" />
		<result property = "order_tag3" column = "ORDER_TAG3" />
		<result property = "order_tag4" column = "ORDER_TAG4" />
		<result property = "platform_price" column = "PLATFORM_PRICE" />
		<result property = "seller_price" column = "SELLER_PRICE" />
		<result property = "tpl_supplier_code" column = "TPL_SUPPLIER_CODE" />
		<result property = "real_store_id" column = "REAL_STORE_ID" />
		<result property = "sale_profit" column = "SALE_PROFIT" />
		<result property = "gayy_subsidy" column = "GAYY_SUBSIDY" />
		<result property = "first_order_channel" column = "FIRST_ORDER_CHANNEL" />
		<result property = "first_channel_profit" column = "FIRST_CHANNEL_PROFIT" />
		<result property = "this_channel_profit" column = "THIS_CHANNEL_PROFIT" />
		<result property = "success_time" column = "SUCCESS_TIME" />
		<!-- <result property = "tpl_id" column = "TPL_ID" />
		<result property = "tpl_dm_id" column = "TPL_DM_ID" />
		<result property = "tpl_dm_name" column = "TPL_DM_NAME" />
		<result property = "tpl_dm_mobile" column = "TPL_DM_MOBILE" />
		<result property = "tpl_distance" column = "TPL_DISTANCE" />
		<result property = "tpl_fee" column = "TPL_FEE" />
		<result property = "tpl_cargo_weight" column = "TPL_CARGO_WEIGHT" /> -->
	</resultMap>

	<!-- 获取最大签收时间 -->
    <select id="queryMaxSignedTime" resultType="java.lang.String">
        <![CDATA[
			select max(sign_time) as max_signed_time from df_mass_order_daily
		]]>
    </select>

	<!-- 获取最大退货时间 -->
	<select id="queryMaxReturnTime" resultType="java.lang.String">
		<![CDATA[
			select max(return_time) as max_return_time from df_mass_order_daily
		]]>
	</select>

    <!-- 操作Daily -->
	<insert id="addDfMassOrderDaily" parameterType="MassOrderEntity" >
        insert ignore into df_mass_order_daily(id, order_sn, group_id, order_type, business_model_id, customer_id, order_address_id, store_id, eshop_id, order_status, 
        		order_source , invoice_status , buyer_remark , seller_remark ,employee_remark, abnormal_type, abnormal_remark,  delivery_type, trading_price, payable_price, 
        		is_split, employee_id, employee_phone, employee_name, appointment_start_time,  appointment_end_time , eshop_combo_pro_id , expiry_date, combo_price , total_quantity ,  
        		status, version, create_user, create_time, update_user,	 update_time, create_user_id, update_user_id, order_sn_reserve, store_remark,  score,  groupon_instance_id, 
        		normal_store_id, third_part, sign_time, info_village_code,area_code,info_employee_a_no,pubseas_label,loan_label,store_name,store_code,store_city_code,store_white,store_province_code,store_status,
        		customer_name,customer_mobile_phone,order_quantity,eshop_name,eshop_white,department_id, bussiness_group_id,area_company_id, channel_id,store_city_name, company_name,channel_name,
        		department_name, gmv_price,employee_no,addr_name,addr_mobilephone,addr_address,business_type,eshop_joint_ims,cct_proration_platform,cct_proration_seller,
        		tpl_supplier_code, real_store_id, addr_latitude, addr_longitude, cct_content_batch) values
				(#{id}, #{order_sn}, #{group_id}, #{order_type}, #{business_model_id}, #{customer_id}, #{order_address_id}, #{store_id}, #{eshop_id}, #{order_status}, 
				#{order_source} , #{invoice_status} , #{buyer_remark} , #{seller_remark} ,#{employee_remark}, #{abnormal_type}, #{abnormal_remark},  #{delivery_type}, #{trading_price}, #{payable_price}, 
				#{is_split}, #{employee_id} , #{employee_phone}, #{employee_name}, #{appointment_start_time},  #{appointment_end_time} , #{eshop_combo_pro_id} , #{expiry_date}, #{combo_price} , #{total_quantity} ,  
				#{status}, #{version} , #{create_user}, #{create_time}, #{update_user}, #{update_time}, #{create_user_id}, #{update_user_id}, #{order_sn_reserve}, #{store_remark},  #{score},  #{groupon_instance_id}, 
				#{normal_store_id}, #{third_part} , #{sign_time}, #{info_village_code},#{area_code},#{info_employee_a_no},#{pubseas_label},#{loan_label}, #{store_name}, #{store_code}, #{store_city_code},#{store_white},#{store_province_code},#{store_status},
				#{customer_name}, #{customer_mobile_phone}, #{order_quantity}, #{eshop_name}, #{eshop_white}, #{department_id}, #{bussiness_group_id},#{area_company_id} , #{channel_id}, #{store_city_name}, #{company_name}, #{channel_name},
				#{department_name}, #{gmv_price}, #{employee_no}, #{addr_name}, #{addr_mobilephone}, #{addr_address}, #{business_type},#{eshop_joint_ims},#{cct_proration_platform},#{cct_proration_seller},
				#{tpl_supplier_code},#{real_store_id},#{addr_latitude},#{addr_longitude},#{cct_content_batch})
	</insert> 
	
	<!-- 操作Monthly -->
	<insert id="addDfMassOrderMonthly" parameterType="MassOrderEntity" >
       	insert ignore into df_mass_order_monthly(id, order_sn, group_id, order_type, business_model_id, customer_id, order_address_id, store_id, eshop_id, order_status, 
        		order_source , invoice_status , buyer_remark , seller_remark ,employee_remark, abnormal_type, abnormal_remark,  delivery_type, trading_price, payable_price, 
        		is_split, employee_id, employee_phone, employee_name, appointment_start_time,  appointment_end_time , eshop_combo_pro_id , expiry_date, combo_price , total_quantity ,  
        		status, version, create_user, create_time, update_user,	 update_time, create_user_id, update_user_id, order_sn_reserve, store_remark,  score,  groupon_instance_id, 
        		normal_store_id, third_part, sign_time, info_village_code,area_code,info_employee_a_no,pubseas_label,loan_label,store_name,store_code,store_city_code,store_white,store_province_code,store_status,
        		customer_name,customer_mobile_phone,order_quantity,eshop_name,eshop_white,department_id, bussiness_group_id,area_company_id, channel_id,store_city_name, company_name,channel_name,
        		department_name, gmv_price,employee_no,addr_name,addr_mobilephone,addr_address,business_type,eshop_joint_ims,cct_proration_platform,cct_proration_seller,
        		tpl_supplier_code, real_store_id, addr_latitude, addr_longitude, cct_content_batch) values
		       (#{id}, #{order_sn}, #{group_id}, #{order_type}, #{business_model_id}, #{customer_id}, #{order_address_id}, #{store_id}, #{eshop_id}, #{order_status}, 
				#{order_source} , #{invoice_status} , #{buyer_remark} , #{seller_remark} ,#{employee_remark}, #{abnormal_type}, #{abnormal_remark},  #{delivery_type}, #{trading_price}, #{payable_price}, 
				#{is_split}, #{employee_id} , #{employee_phone}, #{employee_name}, #{appointment_start_time},  #{appointment_end_time} , #{eshop_combo_pro_id} , #{expiry_date}, #{combo_price} , #{total_quantity} ,  
				#{status}, #{version} , #{create_user}, #{create_time}, #{update_user}, #{update_time}, #{create_user_id}, #{update_user_id}, #{order_sn_reserve}, #{store_remark},  #{score},  #{groupon_instance_id}, 
				#{normal_store_id}, #{third_part} , #{sign_time}, #{info_village_code},#{area_code},#{info_employee_a_no},#{pubseas_label},#{loan_label}, #{store_name}, #{store_code}, #{store_city_code},#{store_white},#{store_province_code},#{store_status},
				#{customer_name}, #{customer_mobile_phone}, #{order_quantity}, #{eshop_name}, #{eshop_white}, #{department_id}, #{bussiness_group_id},#{area_company_id} , #{channel_id}, #{store_city_name}, #{company_name}, #{channel_name},
				#{department_name}, #{gmv_price}, #{employee_no}, #{addr_name}, #{addr_mobilephone}, #{addr_address}, #{business_type},#{eshop_joint_ims},#{cct_proration_platform},#{cct_proration_seller},
				#{tpl_supplier_code},#{real_store_id},#{addr_latitude},#{addr_longitude},#{cct_content_batch})
	</insert>
	
	<!-- 操作Total -->
	<insert id="addDfMassOrderTotal" parameterType="MassOrderEntity" >
       	insert ignore into df_mass_order_total(id, order_sn, group_id, order_type, business_model_id, customer_id, order_address_id, store_id, eshop_id, order_status, 
        		order_source , invoice_status , buyer_remark , seller_remark ,employee_remark, abnormal_type, abnormal_remark,  delivery_type, trading_price, payable_price, 
        		is_split, employee_id, employee_phone, employee_name, appointment_start_time,  appointment_end_time , eshop_combo_pro_id , expiry_date, combo_price , total_quantity ,  
        		status, version, create_user, create_time, update_user,	 update_time, create_user_id, update_user_id, order_sn_reserve, store_remark,  score,  groupon_instance_id, 
        		normal_store_id, third_part, sign_time, info_village_code,area_code,info_employee_a_no,pubseas_label,loan_label,store_name,store_code,store_city_code,store_white,store_province_code,store_status,
        		customer_name,customer_mobile_phone,order_quantity,eshop_name,eshop_white,department_id, bussiness_group_id,area_company_id, channel_id,store_city_name, company_name,channel_name,
        		department_name, gmv_price,employee_no,addr_name,addr_mobilephone,addr_address,business_type,eshop_joint_ims,cct_proration_platform,cct_proration_seller,
        		tpl_supplier_code, real_store_id, addr_latitude, addr_longitude, cct_content_batch) values
		       (#{id}, #{order_sn}, #{group_id}, #{order_type}, #{business_model_id}, #{customer_id}, #{order_address_id}, #{store_id}, #{eshop_id}, #{order_status}, 
				#{order_source} , #{invoice_status} , #{buyer_remark} , #{seller_remark} ,#{employee_remark}, #{abnormal_type}, #{abnormal_remark},  #{delivery_type}, #{trading_price}, #{payable_price}, 
				#{is_split}, #{employee_id} , #{employee_phone}, #{employee_name}, #{appointment_start_time},  #{appointment_end_time} , #{eshop_combo_pro_id} , #{expiry_date}, #{combo_price} , #{total_quantity} ,  
				#{status}, #{version} , #{create_user}, #{create_time}, #{update_user}, #{update_time}, #{create_user_id}, #{update_user_id}, #{order_sn_reserve}, #{store_remark},  #{score},  #{groupon_instance_id}, 
				#{normal_store_id}, #{third_part} , #{sign_time}, #{info_village_code},#{area_code},#{info_employee_a_no}, #{pubseas_label},#{loan_label},#{store_name}, #{store_code}, #{store_city_code},#{store_white},#{store_province_code},#{store_status},
				#{customer_name}, #{customer_mobile_phone}, #{order_quantity}, #{eshop_name}, #{eshop_white}, #{department_id}, #{bussiness_group_id},#{area_company_id} , #{channel_id}, #{store_city_name}, #{company_name}, #{channel_name},
				#{department_name}, #{gmv_price}, #{employee_no}, #{addr_name}, #{addr_mobilephone}, #{addr_address}, #{business_type},#{eshop_joint_ims},#{cct_proration_platform},#{cct_proration_seller},
				#{tpl_supplier_code},#{real_store_id},#{addr_latitude},#{addr_longitude},#{cct_content_batch})
	</insert>  
	
	<!-- 更新Daily中需要计算的字段信息 -->
	<update id="updateDfMassOrderDaily" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_daily set return_label = #{returnLabel}, return_time = #{returnTime},returned_amount = #{returned_amount} where id = #{id}
		]]>
	</update>
	
	<!-- 更新Monthly中需要计算的字段信息 -->
	<update id="updateDfMassOrderMonthly" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_monthly set return_label = #{returnLabel}, return_time = #{returnTime},returned_amount = #{returned_amount} where id = #{id}
		]]>
	</update>
	
	<!-- 更新Total中需要计算的字段信息 -->
	<update id="updateDfMassOrderTotal" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_total set return_label = #{returnLabel}, return_time = #{returnTime},returned_amount = #{returned_amount} where id = #{id}
		]]>
	</update>
	
	<!-- 更新异常订单标识 -->
	<update id="updateAbnormalOrder" parameterType="java.util.Map">
		<![CDATA[
			UPDATE df_mass_order_daily dmod,
			 df_mass_order_monthly dmom,
			 df_mass_order_total dmot
			SET dmod.abnormal_label = #{abnormalLabel},
			 dmom.abnormal_label = #{abnormalLabel},
			 dmot.abnormal_label = #{abnormalLabel}
			WHERE
				dmod.order_sn = dmom.order_sn
			AND dmom.order_sn = dmot.order_sn
			AND dmod.order_sn IN (
				SELECT
					ordersn AS order_sn
				FROM
					ds_abnormal_order
				WHERE
					updatetime >= #{queryTime}
				AND STATUS != 3
			)
		]]>
	</update>
	
	<!-- 更新异常订单标识:更新申诉通过的订单 -->
	<update id="updateAbnormalOrderToNormal" parameterType="java.util.Map">
		<![CDATA[
			UPDATE df_mass_order_daily dmod,
			 df_mass_order_monthly dmom,
			 df_mass_order_total dmot
			SET dmod.abnormal_label = #{abnormalNormalLabel},
			 dmom.abnormal_label = #{abnormalNormalLabel},
			 dmot.abnormal_label = #{abnormalNormalLabel}
			WHERE
				dmod.order_sn = dmom.order_sn
			AND dmom.order_sn = dmot.order_sn
			AND dmod.order_sn IN (
				SELECT
					ordersn AS order_sn
				FROM
					ds_abnormal_order
				WHERE
					updatetime >= #{queryTime}
				AND STATUS = 3
			)
		]]>
	</update>
	
	<!-- 每天删除Daily前一天数据 -->
	<delete  id="deleteDfMassOrderDaily" parameterType="java.lang.String">
		<![CDATA[
			delete from df_mass_order_daily where sign_time < #{date_time}
		]]>
	</delete>
	
	<!-- Monthly每月1号删数据，保留最近2个月 -->
	<delete  id="deleteDfMassOrderMonthly" parameterType="java.lang.String">
		<![CDATA[
			delete from df_mass_order_monthly where sign_time < #{date_time}
		]]>
	</delete>
	
	<!-- Daily更新新客标识 -->
	<update id="updateCustomerOrderDaily" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_daily set customer_isnew_flag = #{customer_isnew_flag} where order_sn = #{order_sn}
		]]>
	</update>

	<!-- Monthly更新新客标识 -->
	<update id="updateCustomerOrderMonthly" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_monthly set customer_isnew_flag = #{customer_isnew_flag} where order_sn = #{order_sn}
		]]>
	</update>
	
	<!-- Total更新新客标识 -->
	<update id="updateCustomerOrderTotal" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_total set customer_isnew_flag = #{customer_isnew_flag} where order_sn = #{order_sn}
		]]>
	</update>
	
	<!-- 查询MassOrder订单列表 -->
	<select id="queryMassOrderByDate" parameterType="java.util.Map" resultMap="massOrderResultMap">
	<![CDATA[
		 select dmod.id from df_mass_order_daily dmod
	]]>
	<where>
		<if test="queryTime != null and '' != queryTime">
	       <![CDATA[                   
 	          dmod.sign_time >=  #{queryTime} and info_village_code is NULL
	       ]]> 
		</if>
	</where>
  </select>

	<!-- 根据订单号查询是否存在 -->
	<select id="queryOrersnByOrderId" parameterType="java.util.Map" resultType="java.lang.String">
		<![CDATA[
		 select order_sn from df_mass_order_monthly dmod
		 where id = #{orderid} and dmod.sign_time >= #{maxSignedTime}
		 and dmod.sign_time <= #{endSignedTime}
		]]>
	</select>
  
  <update id="updateOrderVillageCodeDaily" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_daily 
			set info_village_code = #{villagecode} ,area_code =#{areacode}, info_employee_a_no =#{employee_a_no}
			where id = #{order_id}
		]]>
  </update>
  
  <update id="updateOrderVillageCodeMonthly" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_monthly 
			set info_village_code = #{villagecode} ,area_code =#{areacode}, info_employee_a_no =#{employee_a_no}
			where id = #{order_id}
		]]>
  </update>
  
  <update id="updateOrderVillageCodeTotal" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_total 
			set info_village_code = #{villagecode} ,area_code =#{areacode}, info_employee_a_no =#{employee_a_no}
			where id = #{order_id}
		]]>
  </update>

	<select id="queryVillageAreaCodeByOrdersn" parameterType="java.lang.String" resultType="java.util.Map">
		<![CDATA[
			select info_village_code,area_code,info_employee_a_no from df_mass_order_monthly where order_sn =#{order_sn} limit 1 
		]]>
	</select>
	
	<select id="queryXBorderBySignTime" parameterType="java.util.Map" resultType="java.util.Map">
		<![CDATA[
			select tor.id as order_id,'B1' as ordertag
			from df_mass_order_daily tor 
			where customer_id in (
				select customer_id from df_mass_order_daily tor 
				where tor.trading_price <=100
				and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime}
				and tor.customer_id not like 'fakecustomer%'
				group by tor.customer_id 
				having sum(tor.trading_price) >=3000
			)
			and tor.trading_price <=100
			and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime}
		UNION
			select tor.id as order_id,'B2' as ordertag
			from df_mass_order_daily tor 
			where customer_id in (
				select customer_id from df_mass_order_daily tor 
				where tor.trading_price >100 and tor.trading_price<1000
				and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime}
				and tor.customer_id not like 'fakecustomer%'
				group by tor.customer_id 
				having sum(tor.trading_price) >=10000
			)
			and tor.trading_price >100 and tor.trading_price<1000
			and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime} 
		UNION 
			select tor.id as order_id,'B3' as ordertag
			from df_mass_order_daily tor 
			where customer_id in (
				select customer_id from df_mass_order_daily tor 
				where tor.trading_price >=1000 and tor.trading_price<10000
				and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime} 
				and tor.customer_id not like 'fakecustomer%'
				group by tor.customer_id 
				having sum(tor.trading_price) >=30000
			)
			and tor.trading_price >=1000 and tor.trading_price<10000
			and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime} 
		UNION 
			select tor.id as order_id,'B4' as ordertag
			from df_mass_order_daily tor 
			where customer_id in (
				select customer_id from df_mass_order_daily tor 
				where tor.trading_price >=10000
				and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime} 
				and tor.customer_id not like 'fakecustomer%'
				group by tor.customer_id 
				having sum(tor.trading_price) >=100000
			)
			and tor.trading_price >=10000
			and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime}  
		]]>
	</select>
	
  <update id="updateXBorderTagDailyById" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_daily set order_tag1 = CASE WHEN locate(#{ordertag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{ordertag}) END where id = #{order_id}
		]]>
  </update>
  
  <update id="updateXBorderTagMonthlyById" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_monthly set order_tag1 = CASE WHEN locate(#{ordertag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{ordertag}) END where id = #{order_id}
		]]>
  </update>
  
  <update id="updateXBorderTagTotalById" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_total set order_tag1 = CASE WHEN locate(#{ordertag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{ordertag}) END where id = #{order_id}
		]]>
  </update>    

  <select id="queryXBCustomerBySignTime" parameterType="java.util.Map" resultType="java.util.Map">
 	<![CDATA[
		select customer_id,'B' as usertag from df_mass_order_daily tor 
		where tor.trading_price <=100
		and sign_time >=#{begintime} and sign_time< #{endtime}
		group by customer_id 
		having sum(tor.trading_price) >=3000
	UNION
		select customer_id,'B' as usertag from df_mass_order_daily tor 
		where tor.trading_price >100 and tor.trading_price <1000
		and sign_time >=#{begintime} and sign_time< #{endtime}
		group by customer_id 
		having sum(tor.trading_price) >=10000
	UNION 
		select customer_id,'B' as usertag from df_mass_order_daily tor 
		where tor.trading_price >=1000 and tor.trading_price<10000
		and sign_time >=#{begintime} and sign_time< #{endtime}
		group by customer_id 
		having sum(tor.trading_price) >=30000
	UNION 
		select customer_id,'B' as usertag from df_mass_order_daily tor 
		where tor.trading_price >=10000
		and sign_time >=#{begintime} and sign_time< #{endtime}
		group by customer_id 
		having sum(tor.trading_price) >=100000
	]]>
  </select>
  
  <insert id="addXBUserTag" parameterType="java.util.Map" >
  	<![CDATA[
  	 	insert ignore into df_userprofile_tag (customer_id,usertag) values (#{customer_id},#{usertag})
  	 ]]>
  </insert>
  
	<select id="queryOrderIdBySignTime" parameterType="java.util.Map" resultType="java.util.Map">
		<![CDATA[
			select id from df_mass_order_monthly 
			where id in (select order_id from tmp_nomalstore)
		]]>
	</select>
	
	<!-- 查询MassOrder订单列表 -->
	<select id="queryMassOrder" parameterType="java.util.Map" resultType="MassOrderEntity">
		<![CDATA[
			 select * from df_mass_order_monthly tor 
		]]>
		<where>
			<if test="first_order_sn != null and '' != first_order_sn">
		       <![CDATA[                   
	 	          tor.order_sn = #{first_order_sn} 
		       ]]> 
			</if>
		</where>
  	</select>
	
	<!-- 更新MassOrder订单标签 开卡礼及试用礼 -->
	<update id="updateKSorderTagDailyByEshopId" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_daily set order_tag1 = CASE WHEN locate(#{order_tag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{order_tag}) END where eshop_id = #{eshop_id} and sign_time >= #{begintime} and sign_time <= #{endtime} 
		]]>
  	</update>
  
  	<update id="updateKSorderTagMonthlyByEshopId" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_monthly set order_tag1 = CASE WHEN locate(#{order_tag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{order_tag}) END where eshop_id = #{eshop_id} and sign_time >= #{begintime} and sign_time <= #{endtime} 
		]]>
  	</update>
  
  	<update id="updateKSorderTagTotalByEshopId" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_total set order_tag1 = CASE WHEN locate(#{order_tag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{order_tag}) END where eshop_id = #{eshop_id} and sign_time >= #{begintime} and sign_time <= #{endtime} 
		]]>
  	</update>
  	
  	<select id="queryMemberCustomerBySignTime" parameterType="java.util.Map" resultType="java.util.Map">
 	<![CDATA[
		 select customer_id,'V' as usertag from df_user_member where create_time >=#{begintime} and create_time< #{endtime}  
	]]>
  </select>
  
  <select id="queryMemberOrderBySignTime" parameterType="java.util.Map" resultType="java.util.Map">
  	<![CDATA[
		 select id as order_id,'M' as ordertag from df_mass_order_monthly dod ,df_user_member dum where dod.customer_id=dum.customer_id and dod.create_time >= dum.opencard_time AND dod.create_time <= dum.associator_expiry_date and dod.sign_time >= #{begintime} and dod.sign_time < #{endtime}
	]]>
  </select>
  
  <!-- 更新 每日城市会员统计数据 -->
  <update id="updateMemberCityDay" parameterType="java.util.Map">
  	<![CDATA[
		INSERT IGNORE INTO ds_ope_member_city_day (date,city_code,city_name,mem_count,mem_gmv,non_mem_count,non_mem_gmv,eshop_count,eshop_gmv,non_eshop_count,non_eshop_gmv) 
		SELECT IFNULL(DATE_FORMAT(sign_time,'%Y-%m-%d'),#{begintime}) as date,store_city_code as city_code,store_city_name as city_name,
		IFNULL(SUM(CASE WHEN order_tag1 like '%M%' AND  order_tag1 like '%E%' THEN 1  ELSE 0 END),0) AS mem_count, 
		IFNULL(SUM(CASE WHEN order_tag1 like '%M%' AND  order_tag1 like '%E%'  THEN trading_price  ELSE 0 END),0) as mem_gmv,
		IFNULL(SUM(CASE WHEN (order_tag1 not like '%M%' AND  order_tag1 like '%E%')  THEN 1  ELSE 0 END),0) AS non_mem_count,
		IFNULL(SUM(CASE WHEN (order_tag1 not like '%M%' AND  order_tag1 like '%E%') THEN trading_price  ELSE 0 END),0) as non_mem_gmv,
		IFNULL(SUM(CASE WHEN order_tag1 like '%E%' THEN 1  ELSE 0 END),0) AS eshop_count, 
		IFNULL(SUM(CASE WHEN order_tag1 like '%E%' THEN trading_price  ELSE 0 END),0) as eshop_gmv,
		IFNULL(SUM(CASE WHEN order_tag1 not like '%E%' THEN 1  ELSE 0 END),0) AS non_eshop_count,
		IFNULL(SUM(CASE WHEN order_tag1 not like '%E%' THEN trading_price  ELSE 0 END),0) as non_eshop_gmv
		FROM df_mass_order_monthly WHERE sign_time >= #{begintime} AND sign_time < #{endtime} group by store_city_code;	 
	]]>
  </update>
  
  <!-- 更新 每日时效分配统计数据 -->
  <update id="updateOrderDistribution" parameterType="java.util.Map">
	  <![CDATA[
	  	INSERT INTO ds_ope_order_distribution (
			order_count,
			order_times,
			order_date
		)
		SELECT
			count(1) AS order_count,
			round(
				(
					UNIX_TIMESTAMP(dmot.sign_time) - UNIX_TIMESTAMP(dmot.create_time)
				) / 60 / 30
			) AS order_times,
		DATE_FORMAT(sign_time,'%Y-%m-%d') as order_date
		FROM
			df_mass_order_monthly dmot
		WHERE
			dmot.sign_time >= #{begintime} and dmot.sign_time < #{endtime}
		AND dmot.order_tag1 LIKE '%E%' AND employee_id is not null 
		GROUP BY
			order_date,order_times
		ORDER BY
			order_date,order_times;
	  ]]>
  </update>
  
	<!-- 更新MassOrderDaily订单标签order_tag2:221订单商品类 -->
	<update id="updateActivityProductForDaily" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_daily tor , df_activity_bussiness_scope dabs
			set tor.order_tag2 ='1'
			where tor.channel_id = dabs.id and dabs.`level` = 2 
			and dabs.type ='product' and tor.sign_time>= #{begintime} and tor.sign_time< #{endtime} ;
		]]>
  	</update> 
  	
  	<!-- 更新MassOrderMonthly订单标签order_tag2:221订单商品类 -->
	<update id="updateActivityProductForMonthly" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_monthly tor , df_activity_bussiness_scope dabs
			set tor.order_tag2 ='1'
			where tor.channel_id = dabs.id and dabs.`level` = 2 
			and dabs.type ='product' and tor.sign_time>=#{begintime} and tor.sign_time< #{endtime} ;
		]]>
  	</update> 
  	
  	<!-- 更新MassOrderTotal订单标签order_tag2:221订单商品类 -->
	<update id="updateActivityProductForTotal" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_total tor , df_activity_bussiness_scope dabs
			set tor.order_tag2 ='1'
			where tor.channel_id = dabs.id and dabs.`level` = 2 
			and dabs.type ='product' and tor.sign_time>=#{begintime} and tor.sign_time< #{endtime} ;
		]]>
  	</update> 
  	
  	<!-- 更新MassOrderDaily订单标签order_tag2:221订单服务类 -->
	<update id="updateActivityServiceForDaily" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_daily tor , df_activity_bussiness_scope dabs
			set tor.order_tag2 ='2'
			where tor.channel_id = dabs.id and dabs.`level` = 2 
			and dabs.type ='service' and tor.sign_time>=#{begintime} and tor.sign_time< #{endtime} ;
		]]>
  	</update> 
  	
  	<!-- 更新MassOrderMonthly订单标签order_tag2:221订单商品类 -->
	<update id="updateActivityServiceForMonthly" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_monthly tor , df_activity_bussiness_scope dabs
			set tor.order_tag2 ='2'
			where tor.channel_id = dabs.id and dabs.`level` = 2 
			and dabs.type ='service' and tor.sign_time>=#{begintime} and tor.sign_time< #{endtime} ;
		]]>
  	</update> 
  	
  	<!-- 更新MassOrderTotal订单标签order_tag2:221订单商品类 -->
	<update id="updateActivityServiceForTotal" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_total tor , df_activity_bussiness_scope dabs
			set tor.order_tag2 ='2'
			where tor.channel_id = dabs.id and dabs.`level` = 2 
			and dabs.type ='service' and tor.sign_time>=#{begintime} and tor.sign_time< #{endtime} ;
		]]>
  	</update>
  	
  	<!-- 更新MassOrderDaily订单标签order_tag2:221订单团购类 -->
	<update id="updateActivityGroupOnForDaily" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_daily tor , df_activity_bussiness_scope dabs
			set tor.order_tag2 ='3'
			where tor.bussiness_group_id = dabs.id and dabs.`level` =1 and dabs.is_groupon = 1 
			and tor.groupon_instance_id is not null 
			and tor.sign_time>=#{begintime} and tor.sign_time< #{endtime} ;
		]]>
  	</update> 
  	
  	<!-- 更新MassOrderMonthly订单标签order_tag2:221订单团购类 -->
	<update id="updateActivityGroupOnForMonthly" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_monthly tor , df_activity_bussiness_scope dabs
			set tor.order_tag2 ='3'
			where tor.bussiness_group_id = dabs.id and dabs.`level` =1 and dabs.is_groupon = 1
			and tor.groupon_instance_id is not null 
			and tor.sign_time>=#{begintime} and tor.sign_time< #{endtime} ;
		]]>
  	</update> 
  	
  	<!-- 更新MassOrderTotal订单标签order_tag2:221订单团购类 -->
	<update id="updateActivityGroupOnForTotal" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_total tor , df_activity_bussiness_scope dabs
			set tor.order_tag2 ='3'
			where tor.bussiness_group_id = dabs.id and dabs.`level` =1 and dabs.is_groupon = 1 
			and tor.groupon_instance_id is not null 
			and tor.sign_time>=#{begintime} and tor.sign_time< #{endtime} ;
		]]>
  	</update>
  	 

	<!-- 查询指定日期内需要计算利润的订单，积分订单不计算 -->
	<select id="queryMassOrderListByDate" parameterType="java.util.Map" resultType="MassOrderEntity">
		<![CDATA[
			 select * from df_mass_order_monthly 
			 where sign_time >= #{begintime} and sign_time <= #{endtime} and trading_price is not null ;
		]]>
  	</select>
  	
  	<!-- 针对未在进销存系统中查找到的订单，第二天再次进行查找计算，补充计算 -->
	<select id="queryMassOrderIsnullListByPreDate" parameterType="java.util.Map" resultType="MassOrderEntity">
		<![CDATA[
			 select * from df_mass_order_monthly 
			 where sign_time >= #{pre_begintime} and sign_time <= #{pre_endtime} and trading_price is not null 
			 and order_tag3='0' and eshop_joint_ims ='yes';
		]]>
  	</select>

	<!-- 在计算完订单优惠券后，针对组合订单进行除法计算，条件为：订单优惠券字段为总优惠金额时除以组合订单数量 -->
	<select id="queryGroupCouponOrderByDate" parameterType="java.util.Map"
		resultType="MassOrderEntity">
		<![CDATA[
		 	select * from df_mass_order_monthly tor
			where tor.is_split ='yes' and tor.apportion_coupon >0 and (tor.trading_price - tor.payable_price)=tor.apportion_coupon  
		 	and tor.sign_time >= #{begintime} and tor.sign_time <= #{endtime} and tor.trading_price is not null ;
		]]>
	</select>

	<!-- 更新order_daily表中成本、利润、合同 -->
	<update id="updateOrderProfitOfDaily" parameterType="MassOrderEntity">
		<![CDATA[
			update df_mass_order_daily
				set cost_price = #{cost_price}, order_profit = #{order_profit}, contract_id = #{contract_id},
				contract_method= #{contract_method}, contract_percent = #{contract_percent}, contract_price= #{contract_price},
				order_tag3 = #{order_tag3}, first_order_channel= #{first_order_channel}
			where id = #{id}
		]]>
	</update>
	<!-- 更新order_monthly表中成本、利润、合同 -->
	<update id="updateOrderProfitOfMonthly" parameterType="MassOrderEntity">
		<![CDATA[
			update df_mass_order_monthly
				set cost_price = #{cost_price}, order_profit = #{order_profit}, contract_id = #{contract_id},
				contract_method= #{contract_method}, contract_percent = #{contract_percent}, contract_price= #{contract_price},
				order_tag3 = #{order_tag3}, first_order_channel= #{first_order_channel}
			where id = #{id}
		]]>
	</update>
	<!-- 更新order_total表中成本、利润、合同 -->
	<update id="updateOrderProfitOfTotal" parameterType="MassOrderEntity">
		<![CDATA[
			update df_mass_order_total
				set cost_price = #{cost_price}, order_profit = #{order_profit}, contract_id = #{contract_id},
				contract_method= #{contract_method}, contract_percent = #{contract_percent}, contract_price= #{contract_price},
				order_tag3 = #{order_tag3}, first_order_channel= #{first_order_channel}
			where id = #{id}
		]]>
	</update>

	<!-- 根据商品编码code和当天日期,查询同步过来的商品日销售表中商品成本价 -->
	<select id="queryCostPriceBySigndateCode" parameterType="java.util.Map" resultType="ImsTbsdgdsEntity">
		<![CDATA[
			 select * from df_ims_tbs_d_gds_daily where c_gcode =#{product_code} and date(c_dt) =#{sign_date} and c_map_store_id =#{store_number} 
			  limit 1 ;
		]]>
  	</select>
  	
  	<!-- 是否1、2、3组中售卡E店(eshop_group in ('1','2','3') and card_type = '1')则豁免 -->
	<select id="queryIsSaleCardEshop" parameterType="java.lang.String" resultType="java.lang.Integer">
		<![CDATA[
			 select count(1) from df_card_eshop_profit where isexempt = 1 and eshop_id= #{eshop_id} ;
		]]>
  	</select>
  	
  	<!-- 查询两天之内新增单子-->
  	<select id="queryNewOder" parameterType="java.util.Map" resultType="java.util.Map">
	SELECT info_village_code,COUNT(DISTINCT customer_id) as store_customer_coun FROM df_mass_order_total WHERE info_village_code is not NULL and sign_time <![CDATA[ >= ]]> DATE_ADD(
				#{date}, INTERVAL -2 day) AND sign_time <![CDATA[ <= ]]> #{date}
				 GROUP BY info_village_code
	</select>

  	<!-- 更新order_daily表中优惠券、返利 -->
  	<update id="updateOrderCouponOfDaily" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_daily
			set apportion_rebate = #{apportion_rebate}, apportion_coupon = #{apportion_coupon},platform_price=#{platform_price},seller_price=#{seller_price}
			where id =#{id} 
		]]>
  	</update>
  	<!-- 更新order_monthly表中优惠券、返利 -->
  	<update id="updateOrderCouponOfMonthly" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_monthly
			set apportion_rebate = #{apportion_rebate}, apportion_coupon = #{apportion_coupon},platform_price=#{platform_price},seller_price=#{seller_price}
			where id =#{id} 
		]]>
  	</update>
  	<!-- 更新order_total表中优惠券、返利 -->
  	<update id="updateOrderCouponOfTotal" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_total 
			set apportion_rebate = #{apportion_rebate}, apportion_coupon = #{apportion_coupon},platform_price=#{platform_price},seller_price=#{seller_price}
			where id =#{id}
		]]>
  	</update>
  	
  	<!-- 更新order_daily表中过账支付利润为0，且订单标签order_tag3为2 -->
  	<update id="updatePostingOrderProfitOfDaily" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_daily set order_profit = '0', order_tag3 = '2'	where id =#{id} 
		]]>
  	</update> 

  	<!-- 更新order_daily表中过账支付利润为0，且订单标签order_tag3为2 -->
  	<update id="updatePostingOrderProfitOfMonthly" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_monthly set order_profit = '0', order_tag3 = '2'	where id =#{id} 
		]]>
  	</update> 
  	
  	<!-- 更新order_daily表中过账支付利润为0，且订单标签order_tag3为2 -->
  	<update id="updatePostingOrderProfitOfTotal" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_total set order_profit = '0', order_tag3 = '2'	where id =#{id} 
		]]>
  	</update>   	  	
 
  	<!-- 更新order_daily表中商家优惠占比的从率订单，利润=(gmvprice-sellerprice)*percent -->
  	<update id="updatePercentSellProfitOfDaily" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_daily set order_profit = (gmv_price-seller_price)*contract_percent where id =#{id} 
		]]>
  	</update> 
  	
   	<!-- 更新order_daily表中商家优惠占比的从率订单，利润=(gmvprice-sellerprice)*percent -->
  	<update id="updatePercentSellProfitOfMonthly" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_monthly set order_profit = (gmv_price-seller_price)*contract_percent where id =#{id} 
		]]>
  	</update>
  	
  	<!-- 更新order_daily表中商家优惠占比的从率订单，利润=(gmvprice-sellerprice)*percent -->
  	<update id="updatePercentSellProfitOfTotal" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_total set order_profit = (gmv_price-seller_price)*contract_percent where id =#{id} 
		]]>
  	</update> 	
  	
   	<!-- 更新营销费用分类标签order_tag4，A1优品试用A2生日券A3开卡礼 -->
  	<update id="updateMarktingTagOfDaily" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_daily set order_tag4 =#{order_tag4}  where id =#{id} 
		]]>
  	</update> 
   	<!-- 更新营销费用分类标签order_tag4，A1优品试用A2生日券A3开卡礼 -->
  	<update id="updateMarktingTagOfMonthly" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_monthly set order_tag4 =#{order_tag4}  where id =#{id} 
		]]>
  	</update> 
   	<!-- 更新营销费用分类标签order_tag4，A1优品试用A2生日券A3开卡礼 -->
  	<update id="updateMarktingTagOfTotal" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_total set order_tag4 =#{order_tag4}  where id =#{id} 
		]]>
  	</update>

	<!-- 查询前一天订单 -->
	<select id="queryMassOrderListByAll" parameterType="java.util.Map" resultType="MassOrderEntity">
		<![CDATA[
			select
			id,
			order_profit,
			platform_price,
			order_tag4,
			bussiness_group_id,
			case
			when locate('A', order_tag4) > 0 then order_profit
			else order_profit - ifnull(platform_price, 0) end
			as sale_profit,
			case
			when locate('A', ifnull(order_tag4, '')) = 0 and bussiness_group_id = '8ac28b935fed0bc8015fed4c76f60018' then if(order_profit - ifnull(platform_price, 0) < 0, - (order_profit - ifnull(platform_price, 0)), null)
			else null end
			as gayy_subsidy
			from df_mass_order_monthly
			-- where date(sign_time) = date_sub(date(now()), interval 1 day);
			where sign_time >= #{begintime} and sign_time <= #{endtime}
		]]>
	</select>

	<update id="updateSaleProfitOfDaily" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_daily set sale_profit = #{sale_profit}, gayy_subsidy =#{gayy_subsidy}
			, first_channel_profit =#{first_channel_profit}, this_channel_profit =#{this_channel_profit}
			where id = #{id}
		]]>
	</update>

	<update id="updateSaleProfitOfMonthly" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_monthly set sale_profit = #{sale_profit}, gayy_subsidy =#{gayy_subsidy}
			, first_channel_profit =#{first_channel_profit}, this_channel_profit =#{this_channel_profit}
			where id = #{id}
		]]>
	</update>

	<update id="updateSaleProfitDailyOfTotal" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_total set sale_profit = #{sale_profit}, gayy_subsidy =#{gayy_subsidy}
			, first_channel_profit =#{first_channel_profit}, this_channel_profit =#{this_channel_profit}
			where id = #{id}
		]]>
	</update>

	<update id="updateUnSuccessOfDaily" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_daily set success_time = #{success_time} where id = #{id}
		]]>
	</update>

	<update id="updateUnSuccessOfMonthly" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_monthly set success_time = #{success_time} where id = #{id}
		]]>
	</update>

	<update id="updateUnSuccessOfTotal" parameterType="MassOrderEntity">
  		<![CDATA[
			update df_mass_order_total set success_time = #{success_time} where id = #{id}
		]]>
	</update>
  
</mapper>