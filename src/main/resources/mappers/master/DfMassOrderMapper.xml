<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guoanshequ.dc.das.dao.master.DfMassOrderMapper">

	<resultMap type="MassOrderEntity" id="massOrderResultMap">
        <id property="id" column="ID" />
		<result property="order_sn" column="ORDER_SN" />
		<result property="group_id" column="GROUP_ID" />
		<result property="order_type" column="ORDER_TYPE" />
		<result property="business_model_id" column="BUSINESS_MODEL_ID" />
		<result property="customer_id" column="CUSTOMER_ID" />
		<result property="order_address_id" column="ORDER_ADDRESS_ID" />
		<result property="store_id" column="STORE_ID" />
		<result property="eshop_id" column="ESHOP_ID" />
		<result property="order_status" column="ORDER_STATUS" />
		<result property="order_source" column="ORDER_SOURCE" />
		<result property="invoice_status" column="INVOICE_STATUS" />
		<result property="buyer_remark" column="BUYER_REMARK" />
		<result property="seller_remark" column="SELLER_REMARK" />
		<result property="employee_remark" column="EMPLOYEE_REMARK" />
		<result property="abnormal_type" column="ABNORMAL_TYPE" />
		<result property="abnormal_remark" column="ABNORMAL_REMARK" />
		<result property="delivery_type" column="DELIVERY_TYPE" />
		<result property="trading_price" column="TRADING_PRICE" />
		<result property="payable_price" column="PAYABLE_PRICE" />
		<result property="is_split" column="IS_SPLIT" />
		<result property="employee_id" column="EMPLOYEE_ID" />
		<result property="employee_phone" column="EMPLOYEE_PHONE" />
		<result property="employee_name" column="EMPLOYEE_NAME" />
		<result property="appointment_start_time" column="APPOINTMENT_START_TIME" />
		<result property="appointment_end_time" column="APPOINTMENT_END_TIME" />
		<result property="eshop_combo_pro_id" column="ESHOP_COMBO_PRO_ID" />
		<result property="expiry_date" column="EXPIRY_DATE" />
		<result property="combo_price" column="COMBO_PRICE" />
		<result property="total_quantity" column="TOTAL_QUANTITY" />
		<result property="status" column="STATUS" />
		<result property="version" column="VERSION" />
		<result property="create_user" column="CREATE_USER" />
		<result property="create_time" column="CREATE_TIME" />
		<result property="update_user" column="UPDATE_USER" />
		<result property="update_time" column="UPDATE_TIME" />
		<result property="create_user_id" column="CREATE_USER_ID" />
		<result property="update_user_id" column="UPDATE_USER_ID" />
		<result property="order_sn_reserve" column="ORDER_SN_RESERVE" />
		<result property="store_remark" column="STORE_REMARK" />
		<result property="score" column="SCORE" />
		<result property="groupon_instance_id" column="GROUPON_INSTANCE_ID" />
		<result property="normal_store_id" column="NORMAL_STORE_ID" />
		<result property="third_part" column="THIRD_PART" />
		<result property="sign_time" column="SIGN_TIME" />
		<result property="info_village_code" column="INFO_VILLAGE_CODE" />
		<result property="area_code" column="AREA_CODE" />
		<result property="info_employee_a_no" column="INFO_EMPLOYEE_A_NO" />
		<result property="store_name" column="STORE_NAME" />
		<result property="store_code" column="STORE_CODE" />
		<result property="store_city_code" column="STORE_CITY_CODE" />
		<result property="store_white" column="STORE_WHITE" />
		<result property="store_province_code" column="STORE_PROVINCE_CODE" />
		<result property="store_status" column="STORE_STATUS" />
		<result property="customer_name" column="CUSTOMER_NAME" />
		<result property="customer_mobile_phone" column="CUSTOMER_MOBILE_PHONE" />
		<result property="order_quantity" column="ORDER_QUANTITY" />
		<result property="eshop_name" column="ESHOP_NAME" />
		<result property="eshop_white" column="ESHOP_WHITE" />
		<result property="department_id" column="DEPARTMENT_ID" />
		<result property="bussiness_group_id" column="BUSSINESS_GROUP_ID" />
		<result property="area_company_id" column="AREA_COMPANY_ID" />
		<result property="channel_id" column="CHANNEL_ID" />
		<result property="store_city_name" column="STORE_CITY_NAME" />
		<result property="company_name" column="COMPANY_NAME" />
		<result property="channel_name" column="CHANNEL_NAME" />
		<result property="department_name" column="DEPARTMENT_NAME" />
		<result property="gmv_price" column="GMV_PRICE" />
</resultMap>

	<!-- 获取最大签收时间 -->
    <select id="queryMaxSignedTime" resultType="java.lang.String">
        <![CDATA[
			select max(sign_time) as max_signed_time from df_mass_order_daily
		]]>
    </select>

	<!-- 获取最大退货时间 -->
	<select id="queryMaxReturnTime" resultType="java.lang.String">
		<![CDATA[
			select max(return_time) as max_return_time from df_mass_order_daily
		]]>
	</select>

    <!-- 操作Daily -->
	<insert id="addDfMassOrderDaily" parameterType="MassOrderEntity" >
        insert ignore into df_mass_order_daily(id, order_sn, group_id, order_type, business_model_id, customer_id, order_address_id, store_id, eshop_id, order_status, 
        		order_source , invoice_status , buyer_remark , seller_remark ,employee_remark, abnormal_type, abnormal_remark,  delivery_type, trading_price, payable_price, 
        		is_split, employee_id, employee_phone, employee_name, appointment_start_time,  appointment_end_time , eshop_combo_pro_id , expiry_date, combo_price , total_quantity ,  
        		status, version, create_user, create_time, update_user,	 update_time, create_user_id, update_user_id, order_sn_reserve, store_remark,  score,  groupon_instance_id, 
        		normal_store_id, third_part, sign_time, info_village_code,area_code,info_employee_a_no,pubseas_label,loan_label,store_name,store_code,store_city_code,store_white,store_province_code,store_status,
        		customer_name,customer_mobile_phone,order_quantity,eshop_name,eshop_white,department_id, bussiness_group_id,area_company_id, channel_id,store_city_name, company_name,channel_name,
        		department_name, gmv_price,employee_no,addr_name,addr_mobilephone,addr_address ) values
				(#{id}, #{order_sn}, #{group_id}, #{order_type}, #{business_model_id}, #{customer_id}, #{order_address_id}, #{store_id}, #{eshop_id}, #{order_status}, 
				#{order_source} , #{invoice_status} , #{buyer_remark} , #{seller_remark} ,#{employee_remark}, #{abnormal_type}, #{abnormal_remark},  #{delivery_type}, #{trading_price}, #{payable_price}, 
				#{is_split}, #{employee_id} , #{employee_phone}, #{employee_name}, #{appointment_start_time},  #{appointment_end_time} , #{eshop_combo_pro_id} , #{expiry_date}, #{combo_price} , #{total_quantity} ,  
				#{status}, #{version} , #{create_user}, #{create_time}, #{update_user}, #{update_time}, #{create_user_id}, #{update_user_id}, #{order_sn_reserve}, #{store_remark},  #{score},  #{groupon_instance_id}, 
				#{normal_store_id}, #{third_part} , #{sign_time}, #{info_village_code},#{area_code},#{info_employee_a_no},#{pubseas_label},#{loan_label}, #{store_name}, #{store_code}, #{store_city_code},#{store_white},#{store_province_code},#{store_status},
				#{customer_name}, #{customer_mobile_phone}, #{order_quantity}, #{eshop_name}, #{eshop_white}, #{department_id}, #{bussiness_group_id},#{area_company_id} , #{channel_id}, #{store_city_name}, #{company_name}, #{channel_name},
				#{department_name}, #{gmv_price}, #{employee_no}, #{addr_name}, #{addr_mobilephone}, #{addr_address})
	</insert> 
	
	<!-- 操作Monthly -->
	<insert id="addDfMassOrderMonthly" parameterType="MassOrderEntity" >
       	insert ignore into df_mass_order_monthly(id, order_sn, group_id, order_type, business_model_id, customer_id, order_address_id, store_id, eshop_id, order_status, 
        		order_source , invoice_status , buyer_remark , seller_remark ,employee_remark, abnormal_type, abnormal_remark,  delivery_type, trading_price, payable_price, 
        		is_split, employee_id, employee_phone, employee_name, appointment_start_time,  appointment_end_time , eshop_combo_pro_id , expiry_date, combo_price , total_quantity ,  
        		status, version, create_user, create_time, update_user,	 update_time, create_user_id, update_user_id, order_sn_reserve, store_remark,  score,  groupon_instance_id, 
        		normal_store_id, third_part, sign_time, info_village_code,area_code,info_employee_a_no,pubseas_label,loan_label,store_name,store_code,store_city_code,store_white,store_province_code,store_status,
        		customer_name,customer_mobile_phone,order_quantity,eshop_name,eshop_white,department_id, bussiness_group_id,area_company_id, channel_id,store_city_name, company_name,channel_name,
        		department_name, gmv_price,employee_no,addr_name,addr_mobilephone,addr_address ) values
		       (#{id}, #{order_sn}, #{group_id}, #{order_type}, #{business_model_id}, #{customer_id}, #{order_address_id}, #{store_id}, #{eshop_id}, #{order_status}, 
				#{order_source} , #{invoice_status} , #{buyer_remark} , #{seller_remark} ,#{employee_remark}, #{abnormal_type}, #{abnormal_remark},  #{delivery_type}, #{trading_price}, #{payable_price}, 
				#{is_split}, #{employee_id} , #{employee_phone}, #{employee_name}, #{appointment_start_time},  #{appointment_end_time} , #{eshop_combo_pro_id} , #{expiry_date}, #{combo_price} , #{total_quantity} ,  
				#{status}, #{version} , #{create_user}, #{create_time}, #{update_user}, #{update_time}, #{create_user_id}, #{update_user_id}, #{order_sn_reserve}, #{store_remark},  #{score},  #{groupon_instance_id}, 
				#{normal_store_id}, #{third_part} , #{sign_time}, #{info_village_code},#{area_code},#{info_employee_a_no},#{pubseas_label},#{loan_label}, #{store_name}, #{store_code}, #{store_city_code},#{store_white},#{store_province_code},#{store_status},
				#{customer_name}, #{customer_mobile_phone}, #{order_quantity}, #{eshop_name}, #{eshop_white}, #{department_id}, #{bussiness_group_id},#{area_company_id} , #{channel_id}, #{store_city_name}, #{company_name}, #{channel_name},
				#{department_name}, #{gmv_price}, #{employee_no}, #{addr_name}, #{addr_mobilephone}, #{addr_address})
	</insert>
	
	<!-- 操作Total -->
	<insert id="addDfMassOrderTotal" parameterType="MassOrderEntity" >
       	insert ignore into df_mass_order_total(id, order_sn, group_id, order_type, business_model_id, customer_id, order_address_id, store_id, eshop_id, order_status, 
        		order_source , invoice_status , buyer_remark , seller_remark ,employee_remark, abnormal_type, abnormal_remark,  delivery_type, trading_price, payable_price, 
        		is_split, employee_id, employee_phone, employee_name, appointment_start_time,  appointment_end_time , eshop_combo_pro_id , expiry_date, combo_price , total_quantity ,  
        		status, version, create_user, create_time, update_user,	 update_time, create_user_id, update_user_id, order_sn_reserve, store_remark,  score,  groupon_instance_id, 
        		normal_store_id, third_part, sign_time, info_village_code,area_code,info_employee_a_no,pubseas_label,loan_label,store_name,store_code,store_city_code,store_white,store_province_code,store_status,
        		customer_name,customer_mobile_phone,order_quantity,eshop_name,eshop_white,department_id, bussiness_group_id,area_company_id, channel_id,store_city_name, company_name,channel_name,
        		department_name, gmv_price,employee_no,addr_name,addr_mobilephone,addr_address ) values
		       (#{id}, #{order_sn}, #{group_id}, #{order_type}, #{business_model_id}, #{customer_id}, #{order_address_id}, #{store_id}, #{eshop_id}, #{order_status}, 
				#{order_source} , #{invoice_status} , #{buyer_remark} , #{seller_remark} ,#{employee_remark}, #{abnormal_type}, #{abnormal_remark},  #{delivery_type}, #{trading_price}, #{payable_price}, 
				#{is_split}, #{employee_id} , #{employee_phone}, #{employee_name}, #{appointment_start_time},  #{appointment_end_time} , #{eshop_combo_pro_id} , #{expiry_date}, #{combo_price} , #{total_quantity} ,  
				#{status}, #{version} , #{create_user}, #{create_time}, #{update_user}, #{update_time}, #{create_user_id}, #{update_user_id}, #{order_sn_reserve}, #{store_remark},  #{score},  #{groupon_instance_id}, 
				#{normal_store_id}, #{third_part} , #{sign_time}, #{info_village_code},#{area_code},#{info_employee_a_no}, #{pubseas_label},#{loan_label},#{store_name}, #{store_code}, #{store_city_code},#{store_white},#{store_province_code},#{store_status},
				#{customer_name}, #{customer_mobile_phone}, #{order_quantity}, #{eshop_name}, #{eshop_white}, #{department_id}, #{bussiness_group_id},#{area_company_id} , #{channel_id}, #{store_city_name}, #{company_name}, #{channel_name},
				#{department_name}, #{gmv_price}, #{employee_no}, #{addr_name}, #{addr_mobilephone}, #{addr_address})
	</insert>  
	
	<!-- 更新Daily中需要计算的字段信息 -->
	<update id="updateDfMassOrderDaily" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_daily set return_label = #{returnLabel}, return_time = #{returnTime},returned_amount = #{returned_amount} where id = #{id}
		]]>
	</update>
	
	<!-- 更新Monthly中需要计算的字段信息 -->
	<update id="updateDfMassOrderMonthly" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_monthly set return_label = #{returnLabel}, return_time = #{returnTime},returned_amount = #{returned_amount} where id = #{id}
		]]>
	</update>
	
	<!-- 更新Total中需要计算的字段信息 -->
	<update id="updateDfMassOrderTotal" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_total set return_label = #{returnLabel}, return_time = #{returnTime},returned_amount = #{returned_amount} where id = #{id}
		]]>
	</update>
	
	<!-- 更新异常订单标识 -->
	<update id="updateAbnormalOrder" parameterType="java.util.Map">
		<![CDATA[
			UPDATE df_mass_order_daily dmod,
			 df_mass_order_monthly dmom,
			 df_mass_order_total dmot
			SET dmod.abnormal_label = #{abnormalLabel},
			 dmom.abnormal_label = #{abnormalLabel},
			 dmot.abnormal_label = #{abnormalLabel}
			WHERE
				dmod.order_sn = dmom.order_sn
			AND dmom.order_sn = dmot.order_sn
			AND dmod.order_sn IN (
				SELECT
					ordersn AS order_sn
				FROM
					ds_abnormal_order
				WHERE
					updatetime >= #{queryTime}
				AND STATUS != 3
			)
		]]>
	</update>
	
	<!-- 更新异常订单标识:更新申诉通过的订单 -->
	<update id="updateAbnormalOrderToNormal" parameterType="java.util.Map">
		<![CDATA[
			UPDATE df_mass_order_daily dmod,
			 df_mass_order_monthly dmom,
			 df_mass_order_total dmot
			SET dmod.abnormal_label = #{abnormalNormalLabel},
			 dmom.abnormal_label = #{abnormalNormalLabel},
			 dmot.abnormal_label = #{abnormalNormalLabel}
			WHERE
				dmod.order_sn = dmom.order_sn
			AND dmom.order_sn = dmot.order_sn
			AND dmod.order_sn IN (
				SELECT
					ordersn AS order_sn
				FROM
					ds_abnormal_order
				WHERE
					updatetime >= #{queryTime}
				AND STATUS = 3
			)
		]]>
	</update>
	
	<!-- 每天删除Daily前一天数据 -->
	<delete  id="deleteDfMassOrderDaily" parameterType="java.lang.String">
		<![CDATA[
			delete from df_mass_order_daily where sign_time < #{date_time}
		]]>
	</delete>
	
	<!-- Monthly每月1号删数据，保留最近2个月 -->
	<delete  id="deleteDfMassOrderMonthly" parameterType="java.lang.String">
		<![CDATA[
			delete from df_mass_order_monthly where sign_time < #{date_time}
		]]>
	</delete>
	
	<!-- Daily更新新客标识 -->
	<update id="updateCustomerOrderDaily" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_daily set customer_isnew_flag = #{customer_isnew_flag} where order_sn = #{order_sn}
		]]>
	</update>

	<!-- Monthly更新新客标识 -->
	<update id="updateCustomerOrderMonthly" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_monthly set customer_isnew_flag = #{customer_isnew_flag} where order_sn = #{order_sn}
		]]>
	</update>
	
	<!-- Total更新新客标识 -->
	<update id="updateCustomerOrderTotal" parameterType="java.util.Map">
		<![CDATA[
			update df_mass_order_total set customer_isnew_flag = #{customer_isnew_flag} where order_sn = #{order_sn}
		]]>
	</update>
	
	<!-- 查询MassOrder订单列表 -->
	<select id="queryMassOrderByDate" parameterType="java.util.Map" resultMap="massOrderResultMap">
	<![CDATA[
		 select dmod.id from df_mass_order_daily dmod
	]]>
	<where>
		<if test="queryTime != null and '' != queryTime">
	       <![CDATA[                   
 	          dmod.sign_time >=  #{queryTime} and info_village_code is NULL
	       ]]> 
		</if>
	</where>
  </select>

	<!-- 根据订单号查询是否存在 -->
	<select id="queryOrersnByOrderId" parameterType="java.util.Map" resultType="java.lang.String">
		<![CDATA[
		 select order_sn from df_mass_order_monthly dmod
		 where id = #{orderid} and dmod.sign_time >= #{maxSignedTime}
		 and dmod.sign_time <= #{endSignedTime}
		]]>
	</select>
  
  <update id="updateOrderVillageCodeDaily" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_daily 
			set info_village_code = #{villagecode} ,area_code =#{areacode}, info_employee_a_no =#{employee_a_no}
			where id = #{order_id}
		]]>
  </update>
  
  <update id="updateOrderVillageCodeMonthly" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_monthly 
			set info_village_code = #{villagecode} ,area_code =#{areacode}, info_employee_a_no =#{employee_a_no}
			where id = #{order_id}
		]]>
  </update>
  
  <update id="updateOrderVillageCodeTotal" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_total 
			set info_village_code = #{villagecode} ,area_code =#{areacode}, info_employee_a_no =#{employee_a_no}
			where id = #{order_id}
		]]>
  </update>

	<select id="queryVillageAreaCodeByOrdersn" parameterType="java.lang.String" resultType="java.util.Map">
		<![CDATA[
			select info_village_code,area_code,info_employee_a_no from df_mass_order_monthly where order_sn =#{order_sn} limit 1 
		]]>
	</select>
	
	<select id="queryXBorderBySignTime" parameterType="java.util.Map" resultType="java.util.Map">
		<![CDATA[
			select tor.id as order_id,'B1' as ordertag
			from df_mass_order_daily tor 
			where customer_id in (
				select customer_id from df_mass_order_daily tor 
				where tor.trading_price <=100
				and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime}
				and tor.customer_id not like 'fakecustomer%'
				group by tor.customer_id 
				having sum(tor.trading_price) >=3000
			)
			and tor.trading_price <=100
			and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime}
		UNION
			select tor.id as order_id,'B2' as ordertag
			from df_mass_order_daily tor 
			where customer_id in (
				select customer_id from df_mass_order_daily tor 
				where tor.trading_price >100 and tor.trading_price<1000
				and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime}
				and tor.customer_id not like 'fakecustomer%'
				group by tor.customer_id 
				having sum(tor.trading_price) >=10000
			)
			and tor.trading_price >100 and tor.trading_price<1000
			and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime} 
		UNION 
			select tor.id as order_id,'B3' as ordertag
			from df_mass_order_daily tor 
			where customer_id in (
				select customer_id from df_mass_order_daily tor 
				where tor.trading_price >=1000 and tor.trading_price<10000
				and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime} 
				and tor.customer_id not like 'fakecustomer%'
				group by tor.customer_id 
				having sum(tor.trading_price) >=30000
			)
			and tor.trading_price >=1000 and tor.trading_price<10000
			and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime} 
		UNION 
			select tor.id as order_id,'B4' as ordertag
			from df_mass_order_daily tor 
			where customer_id in (
				select customer_id from df_mass_order_daily tor 
				where tor.trading_price >=10000
				and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime} 
				and tor.customer_id not like 'fakecustomer%'
				group by tor.customer_id 
				having sum(tor.trading_price) >=100000
			)
			and tor.trading_price >=10000
			and tor.sign_time >=#{begintime} and tor.sign_time< #{endtime}  
		]]>
	</select>
	
  <update id="updateXBorderTagDailyById" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_daily set order_tag1 = CASE WHEN locate(#{ordertag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{ordertag}) END where id = #{order_id}
		]]>
  </update>
  
  <update id="updateXBorderTagMonthlyById" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_monthly set order_tag1 = CASE WHEN locate(#{ordertag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{ordertag}) END where id = #{order_id}
		]]>
  </update>
  
  <update id="updateXBorderTagTotalById" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_total set order_tag1 = CASE WHEN locate(#{ordertag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{ordertag}) END where id = #{order_id}
		]]>
  </update>    

  <select id="queryXBCustomerBySignTime" parameterType="java.util.Map" resultType="java.util.Map">
 	<![CDATA[
		select customer_id,'B' as usertag from df_mass_order_daily tor 
		where tor.trading_price <=100
		and sign_time >=#{begintime} and sign_time< #{endtime}
		group by customer_id 
		having sum(tor.trading_price) >=3000
	UNION
		select customer_id,'B' as usertag from df_mass_order_daily tor 
		where tor.trading_price >100 and tor.trading_price <1000
		and sign_time >=#{begintime} and sign_time< #{endtime}
		group by customer_id 
		having sum(tor.trading_price) >=10000
	UNION 
		select customer_id,'B' as usertag from df_mass_order_daily tor 
		where tor.trading_price >=1000 and tor.trading_price<10000
		and sign_time >=#{begintime} and sign_time< #{endtime}
		group by customer_id 
		having sum(tor.trading_price) >=30000
	UNION 
		select customer_id,'B' as usertag from df_mass_order_daily tor 
		where tor.trading_price >=10000
		and sign_time >=#{begintime} and sign_time< #{endtime}
		group by customer_id 
		having sum(tor.trading_price) >=100000
	]]>
  </select>
  
  <insert id="addXBUserTag" parameterType="java.util.Map" >
  	<![CDATA[
  	 	insert ignore into df_userprofile_tag (customer_id,usertag) values (#{customer_id},#{usertag})
  	 ]]>
  </insert>
  
	<select id="queryOrderIdBySignTime" parameterType="java.util.Map" resultType="java.util.Map">
		<![CDATA[
			select id from df_mass_order_monthly 
			where sign_time >= #{begintime} and sign_time <= #{endtime} 
			and info_village_code is NULL
		]]>
	</select>
	
	<!-- 查询MassOrder订单列表 -->
	<select id="queryMassOrder" parameterType="java.util.Map" resultType="MassOrderEntity">
		<![CDATA[
			 select * from df_mass_order_monthly tor 
		]]>
		<where>
			<if test="first_order_sn != null and '' != first_order_sn">
		       <![CDATA[                   
	 	          tor.order_sn = #{first_order_sn} 
		       ]]> 
			</if>
		</where>
  	</select>
	
	<!-- 更新MassOrder订单标签 开卡礼及试用礼 -->
	<update id="updateKSorderTagDailyByEshopId" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_daily set order_tag1 = CASE WHEN locate(#{order_tag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{order_tag}) END where eshop_id = #{eshop_id} and sign_time >= #{begintime} and sign_time <= #{endtime} 
		]]>
  	</update>
  
  	<update id="updateKSorderTagMonthlyByEshopId" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_monthly set order_tag1 = CASE WHEN locate(#{order_tag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{order_tag}) END where eshop_id = #{eshop_id} and sign_time >= #{begintime} and sign_time <= #{endtime} 
		]]>
  	</update>
  
  	<update id="updateKSorderTagTotalByEshopId" parameterType="java.util.Map">
  		<![CDATA[
			update df_mass_order_total set order_tag1 = CASE WHEN locate(#{order_tag},order_tag1)>0 THEN order_tag1 ELSE CONCAT(IFNULL(order_tag1,''),',',#{order_tag}) END where eshop_id = #{eshop_id} and sign_time >= #{begintime} and sign_time <= #{endtime} 
		]]>
  	</update> 
</mapper>